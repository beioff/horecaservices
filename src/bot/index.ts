import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';
import { categories } from '../companies.js';
import { addOffer, deleteOffer, getOffers } from './offers.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

dotenv.config();

// Initialize bot with your token
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  throw new Error('TELEGRAM_BOT_TOKEN is not defined in environment variables');
}

const bot = new TelegramBot(token, { polling: true });

// Store authorized users
const authorizedUsers = new Set<number>();

// Owner's Telegram ID
const OWNER_ID = parseInt(process.env.TELEGRAM_OWNER_ID || '217431589');

// Store temporary offer data
interface TempOffer {
  id: string;
  name: string;
  logo: string;
  category: string;
  slogan: string;
  shortDescription: string;
  description: string;
  benefits: string[];
  bonus: string;
  contactCta: string;
  contactUrl: string;
  companyId: string;
}

const tempOffers = new Map<number, Partial<TempOffer>>();

// Handle /start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  // If this is the owner, authorize immediately
  if (chatId === OWNER_ID) {
    authorizedUsers.add(chatId);
    await bot.sendMessage(chatId, '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.');
    return;
  }

  // If user is not authorized, send request to owner
  if (!authorizedUsers.has(chatId)) {
    // Send login request to owner
    await bot.sendMessage(OWNER_ID, `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from?.username || chatId}`);
    await bot.sendMessage(OWNER_ID, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:', {
      reply_markup: {
        inline_keyboard: [[
          { 
            text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
            callback_data: `auth_${chatId}`
          }
        ]]
      }
    });

    await bot.sendMessage(chatId, '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    return;
  }

  await bot.sendMessage(chatId, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
});

// Handle /newoffer command
bot.onText(/\/newoffer/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!authorizedUsers.has(chatId)) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
    return;
  }

  // Initialize new offer
  tempOffers.set(chatId, {
    id: '',
    name: '',
    logo: '',
    category: '',
    slogan: '',
    shortDescription: '',
    description: '',
    benefits: [],
    bonus: '',
    contactCta: '',
    contactUrl: '',
    companyId: ''
  });

  // Start with company ID
  await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, r_keeper):');
});

// Handle callback queries (button clicks)
bot.on('callback_query', async (callbackQuery) => {
  if (!callbackQuery.message || !callbackQuery.data) return;

  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data.startsWith('auth_') && chatId === OWNER_ID) {
    const targetUserId = parseInt(data.split('_')[1]);

    authorizedUsers.add(targetUserId);
    await bot.sendMessage(OWNER_ID, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.`);
    await bot.sendMessage(targetUserId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    
    // Answer callback query to remove loading state
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data.startsWith('category_')) {
    const categoryId = data.split('_')[1];
    const tempOffer = tempOffers.get(chatId);
    
    if (tempOffer) {
      tempOffer.category = categoryId;
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
    }
    
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data === 'publish_offer') {
    const tempOffer = tempOffers.get(chatId);
    if (tempOffer) {
      try {
        await addOffer(tempOffer as TempOffer);
        await bot.sendMessage(chatId, '–û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
        tempOffers.delete(chatId);
      } catch (error) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        console.error('Error publishing offer:', error);
      }
    }
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data === 'restart_offer') {
    tempOffers.delete(chatId);
    await bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞—á–∞—Ç–æ –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
    await bot.answerCallbackQuery(callbackQuery.id);
  }
});

// Handle /deleteoffer command
bot.onText(/\/deleteoffer (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  
  if (!authorizedUsers.has(chatId)) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
    return;
  }

  const offerId = match?.[1];
  if (!offerId) {
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    return;
  }

  try {
    await deleteOffer(offerId);
    await bot.sendMessage(chatId, `–û—Ñ—Ñ–µ—Ä ${offerId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
  } catch (error) {
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    console.error('Error deleting offer:', error);
  }
});

// Handle /listoffers command
bot.onText(/\/listoffers/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!authorizedUsers.has(chatId)) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
    return;
  }

  const offers = await getOffers();
  if (offers.length === 0) {
    await bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤.');
    return;
  }

  const offersList = offers.map(offer => 
    `ID: ${offer.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${offer.name}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categories.find(c => c.id === offer.category)?.name}\n\n`
  ).join('---\n');

  await bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤:\n\n${offersList}\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /deleteoffer <ID>`);
});

// Handle text messages for offer creation
bot.on('message', async (msg) => {
  if (!msg.text || !authorizedUsers.has(msg.chat.id)) return;

  const chatId = msg.chat.id;
  const tempOffer = tempOffers.get(chatId);

  if (!tempOffer) return;

  // Handle offer creation step by step
  if (!tempOffer.companyId) {
    tempOffer.companyId = msg.text;
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
  } else if (!tempOffer.name) {
    tempOffer.name = msg.text;
    tempOffer.id = msg.text.toLowerCase().replace(/[^a-z0-9]/g, '_');
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–∏:');
  } else if (!tempOffer.slogan) {
    tempOffer.slogan = msg.text;
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
      reply_markup: {
        inline_keyboard: categories.map(cat => [{
          text: cat.name,
          callback_data: `category_${cat.id}`
        }])
      }
    });
  } else if (!tempOffer.category) {
    // Category is handled by callback
    return;
  } else if (!tempOffer.shortDescription) {
    tempOffer.shortDescription = msg.text;
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
  } else if (!tempOffer.description) {
    tempOffer.description = msg.text;
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):');
  } else if (!tempOffer.benefits) {
    if (msg.text === '/done') {
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –±–æ–Ω—É—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –µ—Å–ª–∏ –Ω–µ—Ç):');
    } else {
      if (!tempOffer.benefits) tempOffer.benefits = [];
      tempOffer.benefits.push(msg.text);
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ:');
    }
  } else if (!tempOffer.bonus) {
    if (msg.text === '/skip') {
      tempOffer.bonus = '';
    } else {
      tempOffer.bonus = msg.text;
    }
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"):');
  } else if (!tempOffer.contactCta) {
    tempOffer.contactCta = msg.text;
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –µ—Å–ª–∏ –Ω–µ—Ç):');
  } else if (!tempOffer.contactUrl) {
    if (msg.text === '/skip') {
      tempOffer.contactUrl = '#';
    } else {
      tempOffer.contactUrl = msg.text;
    }
    
    // Show final offer for review
    const offer = tempOffers.get(chatId);
    if (offer) {
      await bot.sendMessage(chatId, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–∞:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish_offer' }],
            [{ text: 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'restart_offer' }]
          ]
        }
      });
      
      // Send offer details
      await bot.sendMessage(chatId, 
        `*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${offer.name}\n` +
        `*–°–ª–æ–≥–∞–Ω:* ${offer.slogan}\n` +
        `*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${categories.find(c => c.id === offer.category)?.name}\n` +
        `*–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* ${offer.shortDescription}\n` +
        `*–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* ${offer.description}\n` +
        `*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n${offer.benefits?.map(b => `- ${b}`).join('\n')}\n` +
        `*–ë–æ–Ω—É—Å:* ${offer.bonus || '–ù–µ—Ç'}\n` +
        `*–ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏:* ${offer.contactCta}\n` +
        `*URL –∫–Ω–æ–ø–∫–∏:* ${offer.contactUrl}`,
        { parse_mode: 'Markdown' }
      );
    }
  }
});

console.log('Bot is running...'); 
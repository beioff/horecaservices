import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';
import fs from 'fs/promises';
import { categories } from '../companies.ts';
import { addOffer, deleteOffer, updateOffer } from './offers.ts';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

dotenv.config();

// Initialize bot with your token
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  throw new Error('TELEGRAM_BOT_TOKEN is not defined in environment variables');
}

const bot = new TelegramBot(token, { polling: true });

// Store authorized users
const authorizedUsers = new Set<number>();

// Owner's Telegram ID
const OWNER_ID = parseInt(process.env.TELEGRAM_OWNER_ID || '217431589');

// Store temporary offer data
interface TempOffer {
  id: string;
  name: string;
  logo: string;
  category: string;
  slogan: string;
  shortDescription: string;
  description: string;
  benefits: string[];
  bonus: string;
  contactCta: string;
  contactUrl: string;
  logoFileId?: string;
}

const tempOffers = new Map<number, Partial<TempOffer>>();
const userStates = new Map<number, string>();

// Function to show main menu
async function showMainMenu(chatId: number) {
  await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä', callback_data: 'new_offer' }],
        [{ text: 'üóë –£–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä', callback_data: 'delete_offer' }],
        [{ text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ—Ñ–µ—Ä', callback_data: 'edit_offer' }]
      ]
    }
  });
}

// Handle /start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  // If this is the owner, authorize immediately
  if (chatId === OWNER_ID) {
    authorizedUsers.add(chatId);
    await bot.sendMessage(chatId, '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.');
    await showMainMenu(chatId);
    return;
  }

  // If user is not authorized, send request to owner
  if (!authorizedUsers.has(chatId)) {
    // Send login request to owner
    await bot.sendMessage(OWNER_ID, `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${msg.from?.username || chatId}`);
    await bot.sendMessage(OWNER_ID, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:', {
      reply_markup: {
        inline_keyboard: [[
          { 
            text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
            callback_data: `auth_${chatId}`
          }
        ]]
      }
    });

    await bot.sendMessage(chatId, '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    return;
  }

  await bot.sendMessage(chatId, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
  await showMainMenu(chatId);
});

// Handle /newoffer command
bot.onText(/\/newoffer/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!authorizedUsers.has(chatId)) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
    return;
  }

  // Initialize new offer
  tempOffers.set(chatId, {
    id: '',
    name: '',
    logo: '',
    category: '',
    slogan: '',
    shortDescription: '',
    description: '',
    benefits: [],
    bonus: '',
    contactCta: '',
    contactUrl: ''
  });

  userStates.set(chatId, 'waiting_for_name');
  await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
});

// Handle /deleteoffer command
bot.onText(/\/deleteoffer (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  
  if (!authorizedUsers.has(chatId)) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.');
    return;
  }

  if (!match) {
    await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deleteoffer <id>');
    return;
  }

  const offerId = match[1];
  try {
    await deleteOffer(offerId);
    await bot.sendMessage(chatId, `–û—Ñ—Ñ–µ—Ä ${offerId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    await bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞: ${errorMessage}`);
  }
});

// Handle callback queries (button clicks)
bot.on('callback_query', async (callbackQuery) => {
  if (!callbackQuery.message || !callbackQuery.data) return;

  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data.startsWith('auth_') && chatId === OWNER_ID) {
    const targetUserId = parseInt(data.split('_')[1]);
    authorizedUsers.add(targetUserId);
    await bot.sendMessage(OWNER_ID, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.`);
    await bot.sendMessage(targetUserId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    await showMainMenu(targetUserId);
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data === 'new_offer') {
    // Initialize new offer
    tempOffers.set(chatId, {
      id: '',
      name: '',
      logo: '',
      category: '',
      slogan: '',
      shortDescription: '',
      description: '',
      benefits: [],
      bonus: '',
      contactCta: '',
      contactUrl: ''
    });
    userStates.set(chatId, 'waiting_for_name');
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data === 'delete_offer') {
    const companiesList = categories.map(c => `ID: ${c.id} - ${c.name}`).join('\n');
    await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ ID –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n${companiesList}`);
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data === 'edit_offer') {
    const companiesList = categories.map(c => `ID: ${c.id} - ${c.name}`).join('\n');
    await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ ID –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n${companiesList}`);
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data.startsWith('category_')) {
    const categoryId = data.split('_')[1];
    const tempOffer = tempOffers.get(chatId);
    
    if (tempOffer) {
      tempOffer.category = categoryId;
      userStates.set(chatId, 'waiting_for_logo');
      await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):');
    }
    
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data === 'publish_offer') {
    const tempOffer = tempOffers.get(chatId);
    if (tempOffer) {
      try {
        console.log('Attempting to publish offer:', tempOffer);
        await addOffer(tempOffer as TempOffer);
        console.log('Offer published successfully');
        await bot.sendMessage(chatId, '–û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
        tempOffers.delete(chatId);
        userStates.delete(chatId);
      } catch (error) {
        console.error('Error publishing offer:', error);
        await bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }
    await bot.answerCallbackQuery(callbackQuery.id);
  } else if (data === 'restart_offer') {
    tempOffers.delete(chatId);
    userStates.delete(chatId);
    await bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –Ω–∞—á–∞—Ç–æ –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
    await bot.answerCallbackQuery(callbackQuery.id);
  }
});

// Handle text messages for offer creation
bot.on('message', async (msg) => {
  if (!msg.text || !authorizedUsers.has(msg.chat.id)) return;

  const chatId = msg.chat.id;
  const tempOffer = tempOffers.get(chatId);
  const state = userStates.get(chatId);

  if (!tempOffer || !state) return;

  switch (state) {
    case 'waiting_for_name':
      tempOffer.name = msg.text;
      tempOffer.id = msg.text.toLowerCase().replace(/[^a-z0-9]/g, '_');
      userStates.set(chatId, 'waiting_for_slogan');
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–∏:');
      break;

    case 'waiting_for_slogan':
      tempOffer.slogan = msg.text;
      userStates.set(chatId, 'waiting_for_category');
      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
        reply_markup: {
          inline_keyboard: categories.map(cat => [{
            text: cat.name,
            callback_data: `category_${cat.id}`
          }])
        }
      });
      break;

    case 'waiting_for_short_description':
      tempOffer.shortDescription = msg.text;
      userStates.set(chatId, 'waiting_for_description');
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
      break;

    case 'waiting_for_description':
      tempOffer.description = msg.text;
      userStates.set(chatId, 'waiting_for_benefits');
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ):');
      break;

    case 'waiting_for_benefits':
      if (msg.text === '/done') {
        userStates.set(chatId, 'waiting_for_bonus');
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –±–æ–Ω—É—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –µ—Å–ª–∏ –Ω–µ—Ç):');
      } else {
        if (!tempOffer.benefits) tempOffer.benefits = [];
        tempOffer.benefits.push(msg.text);
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ:');
      }
      break;

    case 'waiting_for_bonus':
      if (msg.text === '/skip') {
        tempOffer.bonus = '';
      } else {
        tempOffer.bonus = msg.text;
      }
      userStates.set(chatId, 'waiting_for_contact_cta');
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"):');
      break;

    case 'waiting_for_contact_cta':
      tempOffer.contactCta = msg.text;
      userStates.set(chatId, 'waiting_for_contact_url');
      await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –µ—Å–ª–∏ –Ω–µ—Ç):');
      break;

    case 'waiting_for_contact_url':
      if (msg.text === '/skip') {
        tempOffer.contactUrl = '#';
      } else {
        tempOffer.contactUrl = msg.text;
      }
      
      // Show final offer for review
      const offer = tempOffers.get(chatId);
      if (offer) {
        await bot.sendMessage(chatId, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–∞:', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data: 'publish_offer' }],
              [{ text: 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'restart_offer' }]
            ]
          }
        });
        
        // Send offer details
        await bot.sendMessage(chatId, 
          `*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${offer.name}\n` +
          `*–°–ª–æ–≥–∞–Ω:* ${offer.slogan}\n` +
          `*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${categories.find(c => c.id === offer.category)?.name}\n` +
          `*–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* ${offer.shortDescription}\n` +
          `*–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* ${offer.description}\n` +
          `*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n${offer.benefits?.map(b => `- ${b}`).join('\n')}\n` +
          `*–ë–æ–Ω—É—Å:* ${offer.bonus || '–ù–µ—Ç'}\n` +
          `*–ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏:* ${offer.contactCta}\n` +
          `*URL –∫–Ω–æ–ø–∫–∏:* ${offer.contactUrl}`,
          { parse_mode: 'Markdown' }
        );
      }
      break;
  }
});

// Handle photo messages
bot.on('photo', async (msg) => {
  if (!msg.photo || !authorizedUsers.has(msg.chat.id)) return;

  const chatId = msg.chat.id;
  const tempOffer = tempOffers.get(chatId);
  const state = userStates.get(chatId);

  if (!tempOffer || state !== 'waiting_for_logo') return;

  // Get the largest photo size
  const photo = msg.photo[msg.photo.length - 1];
  tempOffer.logoFileId = photo.file_id;

  // Download the file
  const file = await bot.getFile(photo.file_id);
  const filePath = file.file_path;
  const fileName = `${tempOffer.id}.png`;
  const fileUrl = `https://api.telegram.org/file/bot${token}/${filePath}`;

  // Download and save the file
  const response = await fetch(fileUrl);
  const arrayBuffer = await response.arrayBuffer();
  const buffer = Buffer.from(arrayBuffer);
  const logoPath = path.join(__dirname, '../../public/logos', fileName);
  await fs.writeFile(logoPath, buffer);

  tempOffer.logo = `/logos/${fileName}`;
  userStates.set(chatId, 'waiting_for_short_description');
  await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
});

console.log('Bot is running...'); 